#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–µ–π
"""

import json
import base64
import os
import asyncio
import aiohttp
import urllib.parse
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import WebAppInfo, WebAppData

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - —á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway
BOT_TOKEN = os.getenv('BOT_TOKEN', '7993103484:AAGtwbds-Hzdhpf_lxZr2Xf3YOtvSA1K6VE')

# URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEB_APP_URL = "https://railway-web-page-production.up.railway.app"

# n8n Webhook URL
N8N_WEBHOOK_URL = "https://primary-production-7d413.up.railway.app/webhook-test/promed"

# Bot API URL for n8n to send files back
BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—É–±—Ä–∞–ª–∏ SIGNATURE, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∏–¥–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ n8n)
FIO, BIRTH_DATE, GENDER, IIN, PHONE, EXAMINATION_FOR, ALLERGY, PROHIBITED_PROCEDURES, CONTACT_PERSON, MINOR_CONSENT, PATIENT_REPRESENTATIVE = range(11)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
os.makedirs("signatures", exist_ok=True)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_storage = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user_id = update.effective_user.id
    user_data_storage[user_id] = {}
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ –≤ –¢–û–û ¬´PRO-MED Clinic¬ª\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    return FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –§–ò–û"""
    user_id = update.effective_user.id
    fio = update.message.text.strip()
    
    print(f"\nüìù === –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–û –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{fio}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(fio)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if len(fio) < 3:
        print(f"‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û:")
        return FIO
    
    user_data_storage[user_id]['fio'] = fio
    print(f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    await update.message.reply_text(
        f"–§–ò–û: {fio}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990"
    )
    print(f"üì§ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return BIRTH_DATE

async def get_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    birth_date = update.message.text.strip()
    
    print(f"\nüìÖ === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–¢–´ –†–û–ñ–î–ï–ù–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{birth_date}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(birth_date)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        parsed_date = datetime.strptime(birth_date, "%d.%m.%Y")
        print(f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {parsed_date}")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{birth_date}': {e}")
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return BIRTH_DATE
    
    user_data_storage[user_id]['birth_date'] = birth_date
    print(f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
    keyboard = [
        [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="gender_male")],
        [InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª:",
        reply_markup=reply_markup
    )
    return GENDER

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω"""
    user_id = update.effective_user.id
    phone = update.message.text.strip()
    
    print(f"\nüì± === –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–õ–ï–§–û–ù–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{phone}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(phone)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: starts with 8: {phone.startswith('8')}, length: {len(phone)}, digits after 8: {phone[1:].isdigit() if len(phone) >= 1 else False}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä)
    if not (phone.startswith('8') and len(phone) == 11 and phone[1:].isdigit()):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '{phone}' (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 8XXXXXXXXXX)")
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX:")
        return PHONE
    
    user_data_storage[user_id]['phone'] = phone
    print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É "–Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º—É"
    keyboard = [
        [InlineKeyboardButton("–°–µ–±–µ", callback_data="exam_self")],
        [InlineKeyboardButton("–†–µ–±–µ–Ω–∫—É", callback_data="exam_child")],
        [InlineKeyboardButton("–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫—É", callback_data="exam_relative")],
        [InlineKeyboardButton("–ü–æ–¥–æ–ø–µ—á–Ω–æ–º—É", callback_data="exam_ward")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–ù–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º—É:",
        reply_markup=reply_markup
    )
    return EXAMINATION_FOR

async def get_iin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –ò–ò–ù"""
    user_id = update.effective_user.id
    iin = update.message.text.strip()
    
    print(f"\nüÜî === –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ò–ù –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{iin}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(iin)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã: {iin.isdigit()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò–ù
    if not (iin.isdigit() and len(iin) == 12):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ò–ù: '{iin}' (–Ω–µ 12 —Ü–∏—Ñ—Ä –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ü–∏—Ñ—Ä—ã)")
        await update.message.reply_text("–ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä:")
        return IIN
    
    user_data_storage[user_id]['iin'] = iin
    print(f"‚úÖ –ò–ò–ù —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    await update.message.reply_text(
        f"–ò–ò–ù: {iin}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX:"
    )
    print(f"üì§ –ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return PHONE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    gender = "–ú—É–∂—á–∏–Ω–∞" if query.data == "gender_male" else "–ñ–µ–Ω—â–∏–Ω–∞"
    
    user_data_storage[user_id]['gender'] = gender
    print(f"‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {gender}")
    
    await query.edit_message_text(
        f"–ü–æ–ª: {gender}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ò–ò–ù (12 —Ü–∏—Ñ—Ä):"
    )
    return IIN

async def get_examination_for(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –¥–ª—è –∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    examination_for_map = {
        "exam_self": "—Å–µ–±–µ",
        "exam_child": "—Ä–µ–±–µ–Ω–∫—É", 
        "exam_relative": "—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫—É",
        "exam_ward": "–ø–æ–¥–æ–ø–µ—á–Ω–æ–º—É"
    }
    
    examination_for = examination_for_map[query.data]
    user_data_storage[user_id]['examination_for'] = examination_for
    user_data_storage[user_id]['examination_for_key'] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    
    print(f"‚úÖ –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è: {examination_for}")
    
    # –ï—Å–ª–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–ª—è —Å–µ–±—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if query.data != "exam_self":
        await query.edit_message_text(
            f"–ù–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {examination_for}\n\n"
            "–ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–∏–ª —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ / –æ–ø–µ–∫—É–Ω / –∑–∞–∫–æ–Ω–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞:\n"
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è:"
        )
        return PATIENT_REPRESENTATIVE
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏
        keyboard = [
            [InlineKeyboardButton("–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–∏", callback_data="no_allergy")],
            [InlineKeyboardButton("–ï—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è", callback_data="has_allergy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–ù–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {examination_for}\n\n"
            "–Ø —Å–æ–æ–±—â–∞—é –æ —Ç–æ–º, —á—Ç–æ —É –º–µ–Ω—è:",
            reply_markup=reply_markup
        )
        return ALLERGY

async def get_patient_representative(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ (–§–ò–û) –∏–ª–∏ –≤—Ç–æ—Ä–æ–π (—Å—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞)
    if 'representative_fio' not in user_data_storage[user_id]:
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –§–ò–û
        representative_fio = update.message.text.strip()
        user_data_storage[user_id]['representative_fio'] = representative_fio
        
        await update.message.reply_text(
            f"–§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è: {representative_fio}\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞:"
        )
        return PATIENT_REPRESENTATIVE
    else:
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –ø–æ–ª—É—á–∞–µ–º —Å—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞
        relation = update.message.text.strip()
        user_data_storage[user_id]['representative_relation'] = relation
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –¥–ª—è –∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        examination_for_key = user_data_storage[user_id].get('examination_for_key', 'exam_self')
        person_text = {
            "exam_child": "—É —Ä–µ–±–µ–Ω–∫–∞",
            "exam_relative": "—É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", 
            "exam_ward": "—É –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"
        }
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏
        keyboard = [
            [InlineKeyboardButton("–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–∏", callback_data="no_allergy")],
            [InlineKeyboardButton("–ï—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è", callback_data="has_allergy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–°—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞: {relation}\n\n"
            f"–Ø —Å–æ–æ–±—â–∞—é –æ —Ç–æ–º, —á—Ç–æ {person_text.get(examination_for_key, '—É –ø–∞—Ü–∏–µ–Ω—Ç–∞')}:",
            reply_markup=reply_markup
        )
        return ALLERGY

async def get_allergy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "no_allergy":
        user_data_storage[user_id]['allergy'] = "–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–∏"
        print(f"‚úÖ –ê–ª–ª–µ—Ä–≥–∏—è: –ù–µ—Ç")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º
        await query.edit_message_text(
            "–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–µ—Ç\n\n"
            "–ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –º–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—Ç–∏–≤ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≤—ã—Ö ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\":"
        )
        return PROHIBITED_PROCEDURES
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏
        await query.edit_message_text(
            "–ï—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –ø—Ä–æ–¥—É–∫—Ç—ã –µ—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è:"
        )
        user_data_storage[user_id]['allergy_status'] = "has_allergy"
        return ALLERGY

async def get_allergy_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏"""
    user_id = update.effective_user.id
    allergy_details = update.message.text.strip()
    
    user_data_storage[user_id]['allergy'] = f"–ï—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞: {allergy_details}"
    print(f"‚úÖ –ê–ª–ª–µ—Ä–≥–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {allergy_details}")
    
    await update.message.reply_text(
        f"–ê–ª–ª–µ—Ä–≥–∏—è: {allergy_details}\n\n"
        "–ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –º–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—Ç–∏–≤ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≤—ã—Ö ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\":"
    )
    return PROHIBITED_PROCEDURES

async def get_prohibited_procedures(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"""
    user_id = update.effective_user.id
    prohibited = update.message.text.strip()
    
    if prohibited.lower() in ['–Ω–µ—Ç', '–Ω–µ—Ç—É', '']:
        user_data_storage[user_id]['prohibited_procedures'] = "–ù–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä"
    else:
        user_data_storage[user_id]['prohibited_procedures'] = prohibited
    
    print(f"‚úÖ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {user_data_storage[user_id]['prohibited_procedures']}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –¥–ª—è –∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    examination_for_key = user_data_storage[user_id].get('examination_for_key', 'exam_self')
    person_text = {
        "exam_self": "–º–æ–µ–≥–æ",
        "exam_child": "—Ä–µ–±–µ–Ω–∫–∞", 
        "exam_relative": "—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞",
        "exam_ward": "–ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"
    }
    
    await update.message.reply_text(
        f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {user_data_storage[user_id]['prohibited_procedures']}\n\n"
        f"–õ—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {person_text[examination_for_key]} –∑–¥–æ—Ä–æ–≤—å—è, –ø—Ä–æ–≤–æ–¥–∏–º–æ–º –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∏ –ª–µ—á–µ–Ω–∏–∏, –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —è —Ä–∞–∑—Ä–µ—à–∞—é —Å–æ–æ–±—â–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –ª–∏—Ü–∞–º:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ª–∏—Ü–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ —Å–æ–æ–±—â–∞—Ç—å –æ —Ö–æ–¥–µ –ª–µ—á–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\" –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Ç):"
    )
    return CONTACT_PERSON

async def get_contact_person(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º –ª–∏—Ü–µ"""
    user_id = update.effective_user.id
    contact_fio = update.message.text.strip()
    
    if contact_fio.lower() in ['–Ω–µ—Ç', '–Ω–µ—Ç—É']:
        user_data_storage[user_id]['contact_person'] = {
            'fio': '–ù–µ—Ç',
            'relation': '–ù–µ—Ç', 
            'phone': '–ù–µ—Ç'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–º
        examination_for_key = user_data_storage[user_id].get('examination_for_key', 'exam_self')
        if examination_for_key == 'exam_child':
            await update.message.reply_text(
                "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ù–µ—Ç\n\n"
                "üë∂ –ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –º–ª–∞–¥—à–µ 18 –ª–µ—Ç: –¥–∞—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ª–µ—á–µ–±–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –º–æ–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ª–∏—Ü –ø–æ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º:"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data="minor_yes")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="minor_no")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            return MINOR_CONSENT
        else:
            return await finish_data_collection(update, context)
    else:
        user_data_storage[user_id]['contact_person_fio'] = contact_fio
        await update.message.reply_text(
            f"‚úÖ –§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞: {contact_fio}\n\n"
            "üë• –£–∫–∞–∂–∏—Ç–µ —Ä–æ–¥—Å—Ç–≤–æ/–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É:"
        )
        return CONTACT_PERSON

async def get_contact_relation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É"""
    user_id = update.effective_user.id
    relation = update.message.text.strip()
    
    user_data_storage[user_id]['contact_person_relation'] = relation
    
    await update.message.reply_text(
        f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ: {relation}\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:"
    )
    return CONTACT_PERSON

async def get_contact_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"""
    user_id = update.effective_user.id
    contact_phone = update.message.text.strip()
    
    user_data_storage[user_id]['contact_person'] = {
        'fio': user_data_storage[user_id].get('contact_person_fio', ''),
        'relation': user_data_storage[user_id].get('contact_person_relation', ''),
        'phone': contact_phone
    }
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    user_data_storage[user_id].pop('contact_person_fio', None)
    user_data_storage[user_id].pop('contact_person_relation', None)
    
    print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_data_storage[user_id]['contact_person']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–º
    examination_for_key = user_data_storage[user_id].get('examination_for_key', 'exam_self')
    if examination_for_key == 'exam_child':
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data="minor_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="minor_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞: {contact_phone}\n\n"
            "–ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –º–ª–∞–¥—à–µ 18 –ª–µ—Ç: –¥–∞—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ª–µ—á–µ–±–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –º–æ–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ª–∏—Ü –ø–æ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º:",
            reply_markup=reply_markup
        )
        return MINOR_CONSENT
    else:
        return await finish_data_collection(update, context)

async def get_minor_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    consent = "–î–∞" if query.data == "minor_yes" else "–ù–µ—Ç"
    
    user_data_storage[user_id]['minor_consent'] = consent
    print(f"‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ: {consent}")
    
    await query.edit_message_text(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ: {consent}")
    
    return await finish_data_collection(update, context)

async def get_minor_consent_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    text_input = update.message.text.strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã "–¥–∞" –∏ "–Ω–µ—Ç" –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    if text_input in ['–¥–∞', 'yes', '–¥', 'y', '1', '+']:
        consent = "–î–∞"
    elif text_input in ['–Ω–µ—Ç', 'no', '–Ω', 'n', '0', '-']:
        consent = "–ù–µ—Ç"
    else:
        # –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data="minor_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="minor_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=reply_markup
        )
        return MINOR_CONSENT
    
    user_data_storage[user_id]['minor_consent'] = consent
    print(f"‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ (—Ç–µ–∫—Å—Ç): {consent}")
    
    await update.message.reply_text(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–µ–≥–æ: {consent}")
    
    return await finish_data_collection(update, context)

async def handle_contact_person_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"""
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if 'representative_fio' in user_data_storage[user_id] and 'representative_relation' not in user_data_storage[user_id]:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return await get_patient_representative(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
    if 'contact_person_fio' not in user_data_storage[user_id]:
        # –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø - –§–ò–û
        return await get_contact_person(update, context)
    elif 'contact_person_relation' not in user_data_storage[user_id]:
        # –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        return await get_contact_relation(update, context)
    else:
        # –¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø - —Ç–µ–ª–µ—Ñ–æ–Ω
        return await get_contact_phone(update, context)

async def finish_data_collection(update, context):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–ø–∏—Å–∏"""
    user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.callback_query.from_user.id
    chat_id = update.effective_chat.id if hasattr(update, 'effective_chat') else update.callback_query.message.chat.id
    
    print(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    user_data = user_data_storage[user_id].copy()
    user_data['user_id'] = user_id
    user_data['chat_id'] = chat_id
    user_data['bot_token'] = BOT_TOKEN
    user_data['n8n_webhook'] = N8N_WEBHOOK_URL
    user_data['bot_api_url'] = BOT_API_URL
    
    # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'timestamp' not in user_data:
        user_data['timestamp'] = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è URL
    encoded_data = urllib.parse.quote(json.dumps(user_data, ensure_ascii=False))
    web_app_url_with_data = f"{WEB_APP_URL}?data={encoded_data}"
    
    print(f"üì¶ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    for key, value in user_data.items():
        if key not in ['bot_token', 'n8n_webhook', 'bot_api_url']:
            print(f"   {key}: {value}")
    
    print(f"üîó URL –¥–ª–∏–Ω–∞: {len(web_app_url_with_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üîó Encoded data –¥–ª–∏–Ω–∞: {len(encoded_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
    keyboard = [
        [InlineKeyboardButton(
            "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", 
            web_app=WebAppInfo(url=web_app_url_with_data)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    if hasattr(update, 'message'):
        await update.message.reply_text(message_text, reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ n8n
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üì§ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏")
    return ConversationHandler.END
    """–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–ø–∏—Å–∏"""
    user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.callback_query.from_user.id
    chat_id = update.effective_chat.id if hasattr(update, 'effective_chat') else update.callback_query.message.chat.id
    
    print(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    user_data = user_data_storage[user_id].copy()
    user_data['user_id'] = user_id
    user_data['chat_id'] = chat_id
    user_data['bot_token'] = BOT_TOKEN
    user_data['n8n_webhook'] = N8N_WEBHOOK_URL
    user_data['bot_api_url'] = BOT_API_URL
    
    # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è URL
    encoded_data = urllib.parse.quote(json.dumps(user_data, ensure_ascii=False))
    web_app_url_with_data = f"{WEB_APP_URL}?data={encoded_data}"
    
    print(f"ÔøΩ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    for key, value in user_data.items():
        if key not in ['bot_token', 'n8n_webhook', 'bot_api_url']:
            print(f"   {key}: {value}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
    keyboard = [
        [InlineKeyboardButton(
            "‚úçÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", 
            web_app=WebAppInfo(url=web_app_url_with_data)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.\n"
        "üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    if hasattr(update, 'message'):
        await update.message.reply_text(message_text, reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ n8n
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üì§ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏")
    return ConversationHandler.END

async def send_to_webhook(user_data, signature_file_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n webhook"""
    print(f"\nüì° === –û–¢–ü–†–ê–í–ö–ê –í WEBHOOK ===")
    print(f"üåê URL: {N8N_WEBHOOK_URL}")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        json_data = {
            "fio": user_data['fio'],
            "date_of_birth": user_data['birth_date'],
            "gender": user_data.get('gender', ''),
            "iin": user_data['iin'],
            "phone": user_data['phone'],
            "examination_for": user_data.get('examination_for', ''),
            "representative_fio": user_data.get('representative_fio', ''),
            "representative_relation": user_data.get('representative_relation', ''),
            "allergy": user_data.get('allergy', ''),
            "prohibited_procedures": user_data.get('prohibited_procedures', ''),
            "contact_person": user_data.get('contact_person', {}),
            "minor_consent": user_data.get('minor_consent', ''),
            "timestamp": user_data['timestamp']
        }
        
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ:")
        for key, value in json_data.items():
            print(f"   {key}: {value}")
        
        async with aiohttp.ClientSession() as session:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            print(f"\nüì§ –≠–¢–ê–ü 1: –û—Ç–ø—Ä–∞–≤–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö...")
            try:
                timeout = aiohttp.ClientTimeout(total=30)
                async with session.post(N8N_WEBHOOK_URL, json=json_data, timeout=timeout) as response:
                    json_result = await response.text()
                    print(f"üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (JSON): HTTP {response.status}")
                    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {json_result[:500]}...")
                    
                    if response.status == 200:
                        print(f"‚úÖ JSON –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                    else:
                        print(f"‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –∫–æ–¥–æ–º {response.status}")
                        
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON –¥–∞–Ω–Ω—ã—Ö")
                return False
            except Exception as json_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON: {json_error}")
                return False
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∏
            print(f"\nüì§ –≠–¢–ê–ü 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–∏...")
            print(f"üìÅ –§–∞–π–ª: {signature_file_path}")
            
            try:
                with open(signature_file_path, 'rb') as f:
                    file_data = f.read()
                    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_data)} –±–∞–π—Ç")
                    
                    form_data = aiohttp.FormData()
                    form_data.add_field('signature', file_data, filename=f'signature_{user_data["timestamp"]}.png', content_type='image/png')
                    form_data.add_field('type', 'signature_file')
                    form_data.add_field('user_id', str(user_data.get('user_id', 'unknown')))
                    form_data.add_field('timestamp', str(user_data['timestamp']))
                    
                    print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:")
                    print(f"   - signature: —Ñ–∞–π–ª PNG ({len(file_data)} –±–∞–π—Ç)")
                    print(f"   - type: signature_file")
                    print(f"   - user_id: {user_data.get('user_id', 'unknown')}")
                    print(f"   - timestamp: {user_data['timestamp']}")
                    
                    timeout = aiohttp.ClientTimeout(total=30)
                    async with session.post(N8N_WEBHOOK_URL, data=form_data, timeout=timeout) as response:
                        file_result = await response.text()
                        print(f"üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ñ–∞–π–ª): HTTP {response.status}")
                        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {file_result[:500]}...")
                        
                        if response.status == 200:
                            print(f"‚úÖ –§–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        else:
                            print(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º {response.status}")
                            
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
                return False
            except Exception as file_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_error}")
                return False
        
        print(f"üéâ –í–°–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´ –í WEBHOOK!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        return False

# REMOVED: handle_signature function
# Now signature data goes directly from web app to n8n webhook
# No need to process it through the bot

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    user_id = update.effective_user.id
    
    await update.message.reply_text(
        "–ë–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
        "‚Ä¢ –§–ò–û\n"
        "‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "‚Ä¢ –ü–æ–ª (–º—É–∂—á–∏–Ω–∞/–∂–µ–Ω—â–∏–Ω–∞)\n"
        "‚Ä¢ –ò–ò–ù (12 —Ü–∏—Ñ—Ä)\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (8XXXXXXXXXX)\n"
        "‚Ä¢ –î–ª—è –∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (—Å–µ–±–µ/—Ä–µ–±–µ–Ω–∫—É/—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫—É/–ø–æ–¥–æ–ø–µ—á–Ω–æ–º—É)\n"
        "‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª–ª–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã\n"
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å—å (—á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)\n\n"
        "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        parse_mode='Markdown'
    )

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_data = update.effective_message.web_app_data.data
        data = json.loads(web_app_data)
        
        user_id = update.effective_user.id
        print(f"üì± === –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        if data.get('action') == 'signature_completed':
            await update.effective_message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–≥–ª–∞—Å–∏—è!\n\n"
                "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if user_id in user_data_storage:
                del user_data_storage[user_id]
                print(f"üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏")
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {data.get('action')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    if user_id in user_data_storage:
        del user_data_storage[user_id]
    
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
            BIRTH_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birth_date)],
            GENDER: [CallbackQueryHandler(get_gender, pattern="^gender_")],
            IIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_iin)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            EXAMINATION_FOR: [CallbackQueryHandler(get_examination_for, pattern="^exam_")],
            PATIENT_REPRESENTATIVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_patient_representative)],
            ALLERGY: [
                CallbackQueryHandler(get_allergy, pattern="^(no_allergy|has_allergy)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_allergy_details)
            ],
            PROHIBITED_PROCEDURES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_prohibited_procedures)],
            CONTACT_PERSON: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_person_flow)],
            MINOR_CONSENT: [
                CallbackQueryHandler(get_minor_consent, pattern="^minor_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_minor_consent_text)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    application.add_handler(CommandHandler('help', help_command))
    
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {WEB_APP_URL}")
    print("üìÅ –ü–æ–¥–ø–∏—Å–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–ø–∫—É 'signatures/'")
    print("üìÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON —Ñ–∞–π–ª—ã")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()