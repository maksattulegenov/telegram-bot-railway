#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–µ–π
"""

import json
import base64
import os
import asyncio
import aiohttp
import urllib.parse
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes
from telegram import WebAppInfo

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - —á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway
BOT_TOKEN = os.getenv('BOT_TOKEN', '7993103484:AAGtwbds-Hzdhpf_lxZr2Xf3YOtvSA1K6VE')

# URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEB_APP_URL = "https://railway-web-page-production.up.railway.app"

# n8n Webhook URL
N8N_WEBHOOK_URL = "https://primary-production-7d413.up.railway.app/webhook-test/promed"

# Bot API URL for n8n to send files back
BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—É–±—Ä–∞–ª–∏ SIGNATURE, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∏–¥–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ n8n)
FIO, BIRTH_DATE, PHONE, IIN = range(4)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
os.makedirs("signatures", exist_ok=True)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_storage = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user_id = update.effective_user.id
    user_data_storage[user_id] = {}
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    return FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –§–ò–û"""
    user_id = update.effective_user.id
    fio = update.message.text.strip()
    
    print(f"\nüìù === –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–û –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{fio}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(fio)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if len(fio) < 3:
        print(f"‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)")
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û:")
        return FIO
    
    user_data_storage[user_id]['fio'] = fio
    print(f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    await update.message.reply_text(
        f"‚úÖ –§–ò–û: {fio}\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990"
    )
    print(f"üì§ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return BIRTH_DATE

async def get_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    birth_date = update.message.text.strip()
    
    print(f"\nüìÖ === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–¢–´ –†–û–ñ–î–ï–ù–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{birth_date}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(birth_date)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        parsed_date = datetime.strptime(birth_date, "%d.%m.%Y")
        print(f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {parsed_date}")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{birth_date}': {e}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return BIRTH_DATE
    
    user_data_storage[user_id]['birth_date'] = birth_date
    print(f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    await update.message.reply_text(
        f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n\n"
        "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
    )
    print(f"üì§ –ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω"""
    user_id = update.effective_user.id
    phone = update.message.text.strip()
    
    print(f"\nüì± === –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–õ–ï–§–û–ù–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{phone}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(phone)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: starts with +7: {phone.startswith('+7')}, length: {len(phone)}, digits after +7: {phone[2:].isdigit() if len(phone) >= 2 else False}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not (phone.startswith('+7') and len(phone) == 12 and phone[2:].isdigit()):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '{phone}' (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç +7XXXXXXXXXX)")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return PHONE
    
    user_data_storage[user_id]['phone'] = phone
    print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    
    await update.message.reply_text(
        f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "üÜî –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ò–ò–ù (12 —Ü–∏—Ñ—Ä):"
    )
    print(f"üì§ –ó–∞–ø—Ä–æ—à–µ–Ω –ò–ò–ù —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return IIN

async def get_iin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –ò–ò–ù"""
    user_id = update.effective_user.id
    iin = update.message.text.strip()
    
    print(f"\nüÜî === –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ò–ù –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id} ===")
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{iin}'")
    print(f"üìè –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {len(iin)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã: {iin.isdigit()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò–ù
    if not (iin.isdigit() and len(iin) == 12):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ò–ù: '{iin}' (–Ω–µ 12 —Ü–∏—Ñ—Ä –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ü–∏—Ñ—Ä—ã)")
        await update.message.reply_text("‚ùå –ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä:")
        return IIN
    
    user_data_storage[user_id]['iin'] = iin
    print(f"‚úÖ –ò–ò–ù —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å")
    print(f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data_storage[user_id]}")
    print(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    user_data = user_data_storage[user_id].copy()
    user_data['user_id'] = user_id
    user_data['chat_id'] = update.effective_chat.id
    user_data['bot_token'] = BOT_TOKEN
    user_data['n8n_webhook'] = N8N_WEBHOOK_URL
    user_data['bot_api_url'] = BOT_API_URL
    
    # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è URL
    encoded_data = urllib.parse.quote(json.dumps(user_data, ensure_ascii=False))
    web_app_url_with_data = f"{WEB_APP_URL}?data={encoded_data}"
    
    print(f"üì¶ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    print(f"   –§–ò–û: {user_data['fio']}")
    print(f"   –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_date']}")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}")
    print(f"   –ò–ò–ù: {user_data['iin']}")
    print(f"   User ID: {user_data['user_id']}")
    print(f"   Chat ID: {user_data['chat_id']}")
    print(f"üîó URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {web_app_url_with_data[:100]}...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
    keyboard = [
        [InlineKeyboardButton(
            "‚úçÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", 
            web_app=WebAppInfo(url=web_app_url_with_data)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –ò–ò–ù: {iin}\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.\n"
        "üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:",
        reply_markup=reply_markup
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ n8n
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üì§ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏")
    return ConversationHandler.END

async def send_to_webhook(user_data, signature_file_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n webhook"""
    print(f"\nüì° === –û–¢–ü–†–ê–í–ö–ê –í WEBHOOK ===")
    print(f"üåê URL: {N8N_WEBHOOK_URL}")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        json_data = {
            "fio": user_data['fio'],
            "date_of_birth": user_data['birth_date'],
            "phone": user_data['phone'],
            "iin": user_data['iin'],
            "timestamp": user_data['timestamp']
        }
        
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ:")
        for key, value in json_data.items():
            print(f"   {key}: {value}")
        
        async with aiohttp.ClientSession() as session:
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            print(f"\nüì§ –≠–¢–ê–ü 1: –û—Ç–ø—Ä–∞–≤–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö...")
            try:
                timeout = aiohttp.ClientTimeout(total=30)
                async with session.post(N8N_WEBHOOK_URL, json=json_data, timeout=timeout) as response:
                    json_result = await response.text()
                    print(f"üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (JSON): HTTP {response.status}")
                    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {json_result[:500]}...")
                    
                    if response.status == 200:
                        print(f"‚úÖ JSON –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                    else:
                        print(f"‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –∫–æ–¥–æ–º {response.status}")
                        
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON –¥–∞–Ω–Ω—ã—Ö")
                return False
            except Exception as json_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON: {json_error}")
                return False
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∏
            print(f"\nüì§ –≠–¢–ê–ü 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–∏...")
            print(f"üìÅ –§–∞–π–ª: {signature_file_path}")
            
            try:
                with open(signature_file_path, 'rb') as f:
                    file_data = f.read()
                    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_data)} –±–∞–π—Ç")
                    
                    form_data = aiohttp.FormData()
                    form_data.add_field('signature', file_data, filename=f'signature_{user_data["timestamp"]}.png', content_type='image/png')
                    form_data.add_field('type', 'signature_file')
                    form_data.add_field('user_id', str(user_data.get('user_id', 'unknown')))
                    form_data.add_field('timestamp', str(user_data['timestamp']))
                    
                    print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:")
                    print(f"   - signature: —Ñ–∞–π–ª PNG ({len(file_data)} –±–∞–π—Ç)")
                    print(f"   - type: signature_file")
                    print(f"   - user_id: {user_data.get('user_id', 'unknown')}")
                    print(f"   - timestamp: {user_data['timestamp']}")
                    
                    timeout = aiohttp.ClientTimeout(total=30)
                    async with session.post(N8N_WEBHOOK_URL, data=form_data, timeout=timeout) as response:
                        file_result = await response.text()
                        print(f"üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ñ–∞–π–ª): HTTP {response.status}")
                        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {file_result[:500]}...")
                        
                        if response.status == 200:
                            print(f"‚úÖ –§–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        else:
                            print(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º {response.status}")
                            
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
                return False
            except Exception as file_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_error}")
                return False
        
        print(f"üéâ –í–°–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´ –í WEBHOOK!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        return False

# REMOVED: handle_signature function
# Now signature data goes directly from web app to n8n webhook
# No need to process it through the bot

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    user_id = update.effective_user.id
    
    await update.message.reply_text(
        "ü§ñ *–ë–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
        "*–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –§–ò–û\n"
        "‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX)\n"
        "‚Ä¢ –ò–ò–ù (12 —Ü–∏—Ñ—Ä)\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å—å (—á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)\n\n"
        "üìù –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        parse_mode='Markdown'
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    if user_id in user_data_storage:
        del user_data_storage[user_id]
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
            BIRTH_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birth_date)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            IIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_iin)],
            # SIGNATURE state removed - signature goes directly to n8n
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    
    # Removed separate web app data handler - not needed anymore
    
    application.add_handler(CommandHandler('help', help_command))
    
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {WEB_APP_URL}")
    print("üìÅ –ü–æ–¥–ø–∏—Å–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–ø–∫—É 'signatures/'")
    print("üìÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON —Ñ–∞–π–ª—ã")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()